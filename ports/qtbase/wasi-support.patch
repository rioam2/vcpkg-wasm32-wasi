From 75574c510aef58412a0ec83c383d24c85b063a22 Mon Sep 17 00:00:00 2001
From: Rio Martinez <rio@riomartinez.com>
Date: Tue, 9 Jul 2024 16:25:57 +0200
Subject: [PATCH 1/2] chore: add rudimentary wasi support

This PR adds rudimentary WebAssembly/WASI support
by excluding unsupported calls to non-implemented
WASI/posix syscalls such as setjmp. All
modifications are behind preprocessor directives
to ensure that no other targets are affected by
the patches.

In the future, use of CMake to swap out the needed
source files is a preferred option. For now, this
patch provides the needed functionality while
being as non-destructive as possible.

chore: add build scripts and github action

Adds dockerfile for building in a debian image and
adds a build script for ease of use compiling for
the first time.

A root container is used to install wasi-sdk into
the clang-runtimes directory.

A github workflow is added to smoke test all
pushes and pull requests. Resulting static
library is uploaded to the run as an artifact.
---
 src/3rdparty/freetype/src/sfnt/ttcmap.c       |  9 +++-
 src/3rdparty/freetype/src/smooth/ftgrays.c    |  6 +++
 src/corelib/configure.cmake                   |  2 +-
 src/corelib/global/qlibraryinfo.cpp           |  8 +++
 src/corelib/global/qlogging.cpp               |  4 ++
 src/corelib/global/qrandom.cpp                |  4 +-
 src/corelib/global/qsystemdetection.h         |  4 ++
 src/corelib/io/qfilesystemengine_unix.cpp     |  2 +
 src/corelib/io/qloggingregistry.cpp           |  4 ++
 src/corelib/kernel/qcore_unix_p.h             | 54 +++++++++++++++++++
 src/corelib/kernel/qcoreapplication.cpp       |  8 +--
 src/corelib/kernel/qtestsupport_core.cpp      |  4 ++
 src/gui/kernel/qguiapplication.cpp            |  4 ++
 src/gui/painting/qgrayraster.c                | 14 +++++
 .../text/freetype/qfreetypefontdatabase.cpp   |  4 ++
 15 files changed, 124 insertions(+), 7 deletions(-)

diff --git a/src/3rdparty/freetype/src/sfnt/ttcmap.c b/src/3rdparty/freetype/src/sfnt/ttcmap.c
index 9ba25dcbc1..6d00f14362 100644
--- a/src/3rdparty/freetype/src/sfnt/ttcmap.c
+++ b/src/3rdparty/freetype/src/sfnt/ttcmap.c
@@ -3834,19 +3834,24 @@
             volatile TT_ValidatorRec  valid;
             volatile FT_Error         error = FT_Err_Ok;
 
-
+#if !defined(__wasi__)
             ft_validator_init( FT_VALIDATOR( &valid ), cmap, limit,
                                FT_VALIDATE_DEFAULT );
+#endif
 
             valid.num_glyphs = (FT_UInt)face->max_profile.numGlyphs;
 
+#if !defined(__wasi__)
             if ( ft_setjmp( FT_VALIDATOR( &valid )->jump_buffer) == 0 )
             {
               /* validate this cmap sub-table */
               error = clazz->validate( cmap, FT_VALIDATOR( &valid ) );
             }
+#endif
 
+#if !defined(__wasi__)
             if ( !valid.validator.error )
+#endif
             {
               FT_CMap  ttcmap;
 
@@ -3863,11 +3868,13 @@
                 ((TT_CMap)ttcmap)->flags = (FT_Int)error;
               }
             }
+#if !defined(__wasi__)
             else
             {
               FT_TRACE0(( "tt_face_build_cmaps:"
                           " broken cmap sub-table ignored\n" ));
             }
+#endif
             break;
           }
         }
diff --git a/src/3rdparty/freetype/src/smooth/ftgrays.c b/src/3rdparty/freetype/src/smooth/ftgrays.c
index 0918272f87..b25c6ea69a 100644
--- a/src/3rdparty/freetype/src/smooth/ftgrays.c
+++ b/src/3rdparty/freetype/src/smooth/ftgrays.c
@@ -612,8 +612,10 @@ typedef ptrdiff_t  FT_PtrDist;
 
       /* insert new cell */
       cell = ras.cell_free++;
+#if !defined(__wasi__)
       if ( cell >= ras.cell_null )
         ft_longjmp( ras.jump_buffer, 1 );
+#endif
 
       cell->x     = ex;
       cell->area  = 0;
@@ -1926,7 +1928,9 @@ typedef ptrdiff_t  FT_PtrDist;
     volatile int  error;
 
 
+#if !defined(__wasi__)
     if ( ft_setjmp( ras.jump_buffer ) == 0 )
+#endif
     {
       if ( continued )
         FT_Trace_Disable();
@@ -1940,6 +1944,7 @@ typedef ptrdiff_t  FT_PtrDist;
                   ras.cell_null - ras.cell_free,
                   ras.cell_null - ras.cell_free == 1 ? "" : "s" ));
     }
+#if !defined(__wasi__)
     else
     {
       error = FT_THROW( Raster_Overflow );
@@ -1947,6 +1952,7 @@ typedef ptrdiff_t  FT_PtrDist;
       FT_TRACE7(( "band [%d..%d]: to be bisected\n",
                   ras.min_ey, ras.max_ey ));
     }
+#endif
 
     return error;
   }
diff --git a/src/corelib/configure.cmake b/src/corelib/configure.cmake
index 4fd8fea376..ce17b3547a 100644
--- a/src/corelib/configure.cmake
+++ b/src/corelib/configure.cmake
@@ -605,7 +605,7 @@ qt_feature("getauxval" PRIVATE
 )
 qt_feature("getentropy" PRIVATE
     LABEL "getentropy()"
-    CONDITION UNIX AND TEST_getentropy
+    CONDITION (UNIX OR WASI) AND TEST_getentropy
 )
 qt_feature("glib" PUBLIC PRIVATE
     LABEL "GLib"
diff --git a/src/corelib/global/qlibraryinfo.cpp b/src/corelib/global/qlibraryinfo.cpp
index a8934fa38c..b367248949 100644
--- a/src/corelib/global/qlibraryinfo.cpp
+++ b/src/corelib/global/qlibraryinfo.cpp
@@ -89,6 +89,9 @@ void QLibrarySettings::load()
 
 static QSettings *findConfiguration()
 {
+#if defined(Q_OS_WASI)
+    return nullptr;
+#endif
     if (QLibraryInfoPrivate::qtconfManualPath)
         return new QSettings(*QLibraryInfoPrivate::qtconfManualPath, QSettings::IniFormat);
 
@@ -263,6 +266,11 @@ static QString prefixFromAppDirHelper()
 {
     QString appDir;
 
+#if defined(Q_OS_WASI)
+    appDir = "/qt";
+    return appDir;
+#endif
+
     if (QCoreApplication::instance()) {
 #ifdef Q_OS_DARWIN
         CFBundleRef bundleRef = CFBundleGetMainBundle();
diff --git a/src/corelib/global/qlogging.cpp b/src/corelib/global/qlogging.cpp
index 627d62ed87..5aa687d6a2 100644
--- a/src/corelib/global/qlogging.cpp
+++ b/src/corelib/global/qlogging.cpp
@@ -92,7 +92,11 @@ static long qt_gettid()
 {
     // no error handling
     // this syscall has existed since Linux 2.4.11 and cannot fail
+#if defined(Q_OS_WASI)
+    return -1;
+#else
     return syscall(SYS_gettid);
+#endif
 }
 #elif defined(Q_OS_DARWIN)
 #  include <pthread.h>
diff --git a/src/corelib/global/qrandom.cpp b/src/corelib/global/qrandom.cpp
index c1c2792736..38e19f3cad 100644
--- a/src/corelib/global/qrandom.cpp
+++ b/src/corelib/global/qrandom.cpp
@@ -17,7 +17,7 @@
 #  include <sys/auxv.h>
 #endif
 
-#if QT_CONFIG(getentropy) && __has_include(<sys/random.h>)
+#if (QT_CONFIG(getentropy) || defined(Q_OS_WASI)) && __has_include(<sys/random.h>)
 #  include <sys/random.h>
 #elif !QT_CONFIG(getentropy) && (!defined(Q_OS_BSD4) || defined(__GLIBC__)) && !defined(Q_OS_WIN)
 #  include "qdeadlinetimer.h"
@@ -64,7 +64,7 @@ QBasicAtomicInteger<uint> qt_randomdevice_control = Q_BASIC_ATOMIC_INITIALIZER(0
 
 struct QRandomGenerator::SystemGenerator
 {
-#if QT_CONFIG(getentropy)
+#if QT_CONFIG(getentropy) || defined(Q_OS_WASI)
     static qsizetype fillBuffer(void *buffer, qsizetype count) noexcept
     {
         // getentropy can read at most 256 bytes, so break the reading
diff --git a/src/corelib/global/qsystemdetection.h b/src/corelib/global/qsystemdetection.h
index 5188104310..50c133c27a 100644
--- a/src/corelib/global/qsystemdetection.h
+++ b/src/corelib/global/qsystemdetection.h
@@ -126,7 +126,11 @@
 #  define Q_OS_VXWORKS
 #elif defined(__HAIKU__)
 #  define Q_OS_HAIKU
+#elif defined(__wasi__)
+#  define Q_OS_WASI
 #elif defined(__MAKEDEPEND__)
+#elif defined(__wasi__)
+#  define Q_OS_WASI
 #else
 #  error "Qt has not been ported to this OS - see http://www.qt-project.org/"
 #endif
diff --git a/src/corelib/io/qfilesystemengine_unix.cpp b/src/corelib/io/qfilesystemengine_unix.cpp
index f343276416..5d4555ea2c 100644
--- a/src/corelib/io/qfilesystemengine_unix.cpp
+++ b/src/corelib/io/qfilesystemengine_unix.cpp
@@ -957,6 +957,7 @@ bool QFileSystemEngine::fillMetaData(const QFileSystemEntry &entry, QFileSystemM
             | QFileSystemMetaData::ExistsAttribute;
     }
 
+#if !defined(Q_OS_WASI)
     // third, we try access(2)
     if (what & (QFileSystemMetaData::UserPermissions | QFileSystemMetaData::ExistsAttribute)) {
         // calculate user permissions
@@ -986,6 +987,7 @@ bool QFileSystemEngine::fillMetaData(const QFileSystemEntry &entry, QFileSystemM
         data.knownFlagsMask |= (what & QFileSystemMetaData::UserPermissions) |
                 QFileSystemMetaData::ExistsAttribute;
     }
+#endif
 
 #if defined(Q_OS_DARWIN)
     if (what & QFileSystemMetaData::AliasType) {
diff --git a/src/corelib/io/qloggingregistry.cpp b/src/corelib/io/qloggingregistry.cpp
index 3c835cce5a..4cee262ad5 100644
--- a/src/corelib/io/qloggingregistry.cpp
+++ b/src/corelib/io/qloggingregistry.cpp
@@ -270,6 +270,10 @@ static QList<QLoggingRule> loadRulesFromFile(const QString &filePath)
  */
 void QLoggingRegistry::initializeRules()
 {
+#if defined(Q_OS_WASI)
+    return;
+#endif
+    
     QList<QLoggingRule> er, qr, cr;
     // get rules from environment
     const QByteArray rulesFilePath = qgetenv("QT_LOGGING_CONF");
diff --git a/src/corelib/kernel/qcore_unix_p.h b/src/corelib/kernel/qcore_unix_p.h
index ed64a5d86b..94beafec9b 100644
--- a/src/corelib/kernel/qcore_unix_p.h
+++ b/src/corelib/kernel/qcore_unix_p.h
@@ -40,7 +40,9 @@
 #endif
 
 #include <chrono>
+#if !defined(Q_OS_WASI)
 #include <sys/wait.h>
+#endif
 #include <errno.h>
 #include <fcntl.h>
 
@@ -192,11 +194,14 @@ inline void qt_ignore_sigpipe()
         // More than one thread could turn off SIGPIPE at the same time
         // But that's acceptable because they all would be doing the same
         // action
+#if defined(Q_OS_WASI)
+#else
         struct sigaction noaction;
         memset(&noaction, 0, sizeof(noaction));
         noaction.sa_handler = SIG_IGN;
         ::sigaction(SIGPIPE, &noaction, nullptr);
         atom.storeRelaxed(1);
+#endif
     }
 }
 
@@ -233,8 +238,14 @@ static inline int qt_safe_open(const char *pathname, int flags, mode_t mode = 07
 // call qt_safe_pipe
 static inline int qt_safe_pipe(int pipefd[2], int flags = 0)
 {
+#if defined(Q_OS_WASI)
+    Q_UNUSED(pipefd)
+#endif
     Q_ASSERT((flags & ~O_NONBLOCK) == 0);
 
+#if defined(Q_OS_WASI)
+    return 0;
+#else
 #ifdef QT_THREADSAFE_CLOEXEC
     // use pipe2
     flags |= O_CLOEXEC;
@@ -255,6 +266,7 @@ static inline int qt_safe_pipe(int pipefd[2], int flags = 0)
 
     return 0;
 #endif
+#endif // Q_OS_WASI
 }
 
 #endif // Q_OS_VXWORKS
@@ -262,6 +274,10 @@ static inline int qt_safe_pipe(int pipefd[2], int flags = 0)
 // don't call dup or fcntl(F_DUPFD)
 static inline int qt_safe_dup(int oldfd, int atleast = 0, int flags = FD_CLOEXEC)
 {
+#if defined(Q_OS_WASI)
+    Q_UNUSED(oldfd)
+    Q_UNUSED(atleast)
+#endif
     Q_ASSERT(flags == FD_CLOEXEC || flags == 0);
 
 #ifdef F_DUPFD_CLOEXEC
@@ -271,7 +287,11 @@ static inline int qt_safe_dup(int oldfd, int atleast = 0, int flags = FD_CLOEXEC
     return ::fcntl(oldfd, cmd, atleast);
 #else
     // use F_DUPFD
+#if defined(Q_OS_WASI)
+    int ret = -1;
+#else
     int ret = ::fcntl(oldfd, F_DUPFD, atleast);
+#endif
 
     if (flags && ret != -1)
         ::fcntl(ret, F_SETFD, flags);
@@ -283,8 +303,15 @@ static inline int qt_safe_dup(int oldfd, int atleast = 0, int flags = FD_CLOEXEC
 // call qt_safe_dup2
 static inline int qt_safe_dup2(int oldfd, int newfd, int flags = FD_CLOEXEC)
 {
+#if defined(Q_OS_WASI)
+    Q_UNUSED(oldfd)
+    Q_UNUSED(newfd)
+#endif
     Q_ASSERT(flags == FD_CLOEXEC || flags == 0);
 
+#if defined(Q_OS_WASI)
+    return -1;
+#else
     int ret;
 #ifdef QT_THREADSAFE_CLOEXEC
     // use dup3
@@ -299,6 +326,7 @@ static inline int qt_safe_dup2(int oldfd, int newfd, int flags = FD_CLOEXEC)
         ::fcntl(newfd, F_SETFD, flags);
     return 0;
 #endif
+#endif
 }
 
 static inline qint64 qt_safe_read(int fd, void *data, qint64 maxlen)
@@ -339,30 +367,56 @@ static inline int qt_safe_close(int fd)
 static inline int qt_safe_execve(const char *filename, char *const argv[],
                                  char *const envp[])
 {
+#if defined(Q_OS_WASI)
+    Q_UNUSED(filename)
+    Q_UNUSED(argv)
+    Q_UNUSED(envp)
+    return -1;
+#else
     int ret;
     EINTR_LOOP(ret, ::execve(filename, argv, envp));
     return ret;
+#endif
 }
 
 static inline int qt_safe_execv(const char *path, char *const argv[])
 {
+#if defined(Q_OS_WASI)
+    Q_UNUSED(path)
+    Q_UNUSED(argv)
+    return -1;
+#else
     int ret;
     EINTR_LOOP(ret, ::execv(path, argv));
     return ret;
+#endif
 }
 
 static inline int qt_safe_execvp(const char *file, char *const argv[])
 {
+#if defined(Q_OS_WASI)
+    Q_UNUSED(file)
+    Q_UNUSED(argv)
+    return -1;
+#else
     int ret;
     EINTR_LOOP(ret, ::execvp(file, argv));
     return ret;
+#endif
 }
 
 static inline pid_t qt_safe_waitpid(pid_t pid, int *status, int options)
 {
+#if defined(Q_OS_WASI)
+    Q_UNUSED(pid)
+    Q_UNUSED(status)
+    Q_UNUSED(options)
+    return -1;
+#else
     int ret;
     EINTR_LOOP(ret, ::waitpid(pid, status, options));
     return ret;
+#endif
 }
 #endif // QT_CONFIG(process)
 
diff --git a/src/corelib/kernel/qcoreapplication.cpp b/src/corelib/kernel/qcoreapplication.cpp
index a80efbb562..b98acb1aff 100644
--- a/src/corelib/kernel/qcoreapplication.cpp
+++ b/src/corelib/kernel/qcoreapplication.cpp
@@ -448,7 +448,7 @@ QCoreApplicationPrivate::QCoreApplicationPrivate(int &aargc, char **aargv)
 #ifndef QT_NO_QOBJECT
     QCoreApplicationPrivate::is_app_closing = false;
 
-#  if defined(Q_OS_UNIX)
+#  if defined(Q_OS_UNIX) && !defined(Q_OS_WASI)
     if (Q_UNLIKELY(!setuidAllowed && (geteuid() != getuid())))
         qFatal("FATAL: The application binary appears to be running setuid, this is a security hole.");
 #  endif // Q_OS_UNIX
@@ -603,7 +603,7 @@ void QCoreApplicationPrivate::initLocale()
 {
 #if defined(QT_BOOTSTRAPPED)
     // Don't try to control bootstrap library locale or encoding.
-#elif defined(Q_OS_UNIX)
+#elif defined(Q_OS_UNIX) || defined(Q_OS_WASI)
     Q_CONSTINIT static bool qt_locale_initialized = false;
     if (qt_locale_initialized)
         return;
@@ -616,7 +616,7 @@ void QCoreApplicationPrivate::initLocale()
 
     // Next, let's ensure that LC_CTYPE is UTF-8, since QStringConverter's
     // QLocal8Bit hard-codes this, and we need to be consistent.
-#  if defined(Q_OS_INTEGRITY)
+#  if defined(Q_OS_INTEGRITY) | defined(Q_OS_WASI)
     setlocale(LC_CTYPE, "UTF-8");
 #  elif defined(Q_OS_QNX)
     // QNX has no nl_langinfo, so we can't check.
@@ -2408,6 +2408,8 @@ static QString qAppFileName()
 #  if defined(Q_OS_ANDROID)
     // the actual process on Android is the Java VM, so this doesn't help us
     return QString();
+#  elif defined(Q_OS_WASI)
+    return QString();
 #  elif defined(Q_OS_LINUX)
     // this includes the Embedded Android builds
     return QFile::decodeName(qt_readlink("/proc/self/exe"));
diff --git a/src/corelib/kernel/qtestsupport_core.cpp b/src/corelib/kernel/qtestsupport_core.cpp
index bc461114d8..05a5932ad7 100644
--- a/src/corelib/kernel/qtestsupport_core.cpp
+++ b/src/corelib/kernel/qtestsupport_core.cpp
@@ -3,6 +3,8 @@
 
 #include "qtestsupport_core.h"
 
+#ifndef _LIBCPP_HAS_NO_THREADS
+
 #include <thread>
 
 QT_BEGIN_NAMESPACE
@@ -87,3 +89,5 @@ Q_CORE_EXPORT void QTest::qWait(int ms)
 }
 
 QT_END_NAMESPACE
+
+#endif
\ No newline at end of file
diff --git a/src/gui/kernel/qguiapplication.cpp b/src/gui/kernel/qguiapplication.cpp
index 690a6f2412..b544e08be6 100644
--- a/src/gui/kernel/qguiapplication.cpp
+++ b/src/gui/kernel/qguiapplication.cpp
@@ -1472,7 +1472,11 @@ void QGuiApplicationPrivate::createPlatformIntegration()
 #endif
 
     bool platformExplicitlySelected = false;
+#if defined(Q_OS_WASI)
+    QByteArray platformNameEnv = "offscreen";
+#else
     QByteArray platformNameEnv = qgetenv("QT_QPA_PLATFORM");
+#endif
     if (!platformNameEnv.isEmpty()) {
         platformName = platformNameEnv;
         platformExplicitlySelected = true;
diff --git a/src/gui/painting/qgrayraster.c b/src/gui/painting/qgrayraster.c
index 3c222c49e1..2c557452b9 100644
--- a/src/gui/painting/qgrayraster.c
+++ b/src/gui/painting/qgrayraster.c
@@ -89,6 +89,8 @@
   /* parameter of the QT_FT_TRACE() and QT_FT_ERROR() macros, used to print/log  */
   /* messages during execution.                                            */
   /*                                                                       */
+#include <QtCore/qglobal.h>
+  
 #undef  QT_FT_COMPONENT
 #define QT_FT_COMPONENT  trace_smooth
 
@@ -121,16 +123,20 @@
 #  include <vxWorksCommon.h>    /* needed for setjmp.h */
 #endif
 #include <string.h>             /* for qt_ft_memcpy() */
+#if !defined(Q_OS_WASI)
 #include <setjmp.h>
+#endif
 #include <limits.h>
 
 #define QT_FT_UINT_MAX  UINT_MAX
 
 #define qt_ft_memset   memset
 
+#if !defined(Q_OS_WASI)
 #define qt_ft_setjmp   setjmp
 #define qt_ft_longjmp  longjmp
 #define qt_ft_jmp_buf  jmp_buf
+#endif
 
 #include <stddef.h>
 typedef ptrdiff_t  QT_FT_PtrDist;
@@ -274,7 +280,9 @@ QT_FT_END_STMNT
     int  band_size;
     int  band_shoot;
 
+#if !defined(Q_OS_WASI)
     qt_ft_jmp_buf  jump_buffer;
+#endif
 
     void*       buffer;
     long        buffer_size;
@@ -396,8 +404,10 @@ QT_FT_END_STMNT
       pcell = &cell->next;
     }
 
+#if !defined(Q_OS_WASI)
     if ( ras.num_cells >= ras.max_cells )
       qt_ft_longjmp( ras.jump_buffer, 1 );
+#endif
 
     cell        = ras.cells + ras.num_cells++;
     cell->x     = x;
@@ -1626,16 +1636,20 @@ QT_FT_END_STMNT
   {
     volatile int  error = 0;
 
+#if !defined(Q_OS_WASI)
     if ( qt_ft_setjmp( ras.jump_buffer ) == 0 )
+#endif
     {
       error = QT_FT_Outline_Decompose( &ras.outline, &ras );
       if ( !ras.invalid )
         gray_record_cell( RAS_VAR );
     }
+#if !defined(Q_OS_WASI)
     else
     {
       error = ErrRaster_Memory_Overflow;
     }
+#endif
 
     return error;
   }
diff --git a/src/gui/text/freetype/qfreetypefontdatabase.cpp b/src/gui/text/freetype/qfreetypefontdatabase.cpp
index cf1ca42ab4..d6b8bd15ae 100644
--- a/src/gui/text/freetype/qfreetypefontdatabase.cpp
+++ b/src/gui/text/freetype/qfreetypefontdatabase.cpp
@@ -24,6 +24,10 @@ using namespace Qt::StringLiterals;
 
 void QFreeTypeFontDatabase::populateFontDatabase()
 {
+#if defined(Q_OS_WASI)
+    return;
+#endif
+
     QString fontpath = fontDir();
     QDir dir(fontpath);
 
-- 
2.39.3 (Apple Git-146)

